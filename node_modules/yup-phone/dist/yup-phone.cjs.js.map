{"version":3,"file":"yup-phone.cjs.js","sources":["../src/yup-phone.ts"],"sourcesContent":["import * as Yup from 'yup';\nimport gPhoneNumber from 'google-libphonenumber';\n\nconst phoneUtil = gPhoneNumber.PhoneNumberUtil.getInstance();\n\ndeclare module 'yup' {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param {String} [countryCode=IN] The country code to check against.\n     * @param {Boolean} [strict=false] How strictly should it check.\n     * @param {String} [errorMessage=DEFAULT_MESSAGE] The error message to return if the validation fails.\n     */\n    phone(\n      countryCode?: string,\n      strict?: boolean,\n      errorMessage?: string\n    ): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = 'phone';\nconst CLDR_REGION_CODE_SIZE = 2;\n\nconst isValidCountryCode = (countryCode: any): boolean =>\n  typeof countryCode === 'string' &&\n  countryCode.length === CLDR_REGION_CODE_SIZE;\n\nYup.addMethod(Yup.string, YUP_PHONE_METHOD, function yupPhone(\n  countryCode?: string,\n  strict: boolean = false,\n  errorMessage: string = ''\n) {\n  const errMsg =\n    typeof errorMessage === 'string' && errorMessage\n      ? errorMessage\n      : isValidCountryCode(countryCode)\n      ? `\\${path} must be a valid phone number for region ${countryCode}`\n      : '${path} must be a valid phone number.';\n  // @ts-ignore\n  return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n    if (!isValidCountryCode(countryCode)) {\n      // if not valid countryCode, then set default country to India (IN)\n      countryCode = 'IN';\n      strict = false;\n    }\n\n    try {\n      const phoneNumber = phoneUtil.parseAndKeepRawInput(value, countryCode);\n\n      if (!phoneUtil.isPossibleNumber(phoneNumber)) {\n        return false;\n      }\n\n      const regionCodeFromPhoneNumber = phoneUtil.getRegionCodeForNumber(\n        phoneNumber\n      );\n\n      /* check if the countryCode provided should be used as\n       default country code or strictly followed\n     */\n      return strict\n        ? phoneUtil.isValidNumberForRegion(phoneNumber, countryCode)\n        : phoneUtil.isValidNumberForRegion(\n            phoneNumber,\n            regionCodeFromPhoneNumber\n          );\n    } catch {\n      return false;\n    }\n  });\n});\n"],"names":["phoneUtil","gPhoneNumber","PhoneNumberUtil","getInstance","YUP_PHONE_METHOD","CLDR_REGION_CODE_SIZE","isValidCountryCode","countryCode","length","Yup","addMethod","string","yupPhone","strict","errorMessage","errMsg","test","value","phoneNumber","parseAndKeepRawInput","isPossibleNumber","regionCodeFromPhoneNumber","getRegionCodeForNumber","isValidNumberForRegion"],"mappings":";oGAGMA,UAAYC,qBAAAA,UAAAA,CAAaC,CAAAA,eAAgBC,CAAAA,WAA7BF,GAmBZG,iBAAmB,QACnBC,sBAAwB,EAExBC,mBAAqBA,QAAA,CAACC,CAAD,QACF,WAAvB,MAAOA,IACPA,CAAYC,CAAAA,SAAWH,sBAEzBI;cAAIC,CAAAA,SAAJD,CAAcA,cAAIE,CAAAA,MAAlBF,CAA0BL,gBAA1BK,CAA4CG,QAAA,CAC1CL,CAD0C,CAE1CM,CAF0C,CAG1CC,CAH0C,CAGjB,UADzBD,IAAAA,EAAkB,CAAA,YAClBC,IAAAA,EAAuB,GAEjBC,EAAAA,CACoB,QAAxB,GAAA,MAAOD,EAAP,EAAoCA,CAApC,CACIA,CADJ,CAEIR,kBAAA,CAAmBC,CAAnB,CAAA,mDAAA,CACoDA,CADpD,CAEA,8CAEC,KAAKS,CAAAA,IAAL,CAAUZ,gBAAV,CAA4BW,CAA5B,CAAoC,SAACE,EAAiB,CACtDX,kBAAA,CAAmBC,CAAnB,IAEHA,CACA,CADc,IACd,CAAAM,CAAA,CAAS,CAAA,MAGP,KACIK,EAAclB,SAAUmB,CAAAA,oBAAV,CAA+BF,CAA/B,CAAsCV,CAAtC,KAEhB,CAACP,SAAUoB,CAAAA,gBAAV,CAA2BF,CAA3B,QACI,CAAA,MAGHG,EAA4BrB,SAAUsB,CAAAA,sBAAV,CAChCJ,CADgC,QAO3BL,EAAA,CACHb,SAAUuB,CAAAA,sBAAV,CAAiCL,CAAjC;AAA8CX,CAA9C,CADG,CAEHP,SAAUuB,CAAAA,sBAAV,CACEL,CADF,CAEEG,CAFF,CAhBF,CAoBF,OAAA,CAAM,OACC,CAAA,CADD,CA3BmD,CAAtD,CATkB,CAH3BZ;"}